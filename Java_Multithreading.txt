Java Multithreading is of two types:-
	1. Thread class
	2. ExecutorService
	
1. Thread class (finegrained mechanism for controlling the creation of threads, their workloads and termination)
	- implement the Runnable Interface (run() method will have to be defined).
	- write the workload of the individual thread in the run() method. Usually it can be a function which is defined in the same class.
	
	- in Driver Class:-
		- Declare objects of thread type and pass in the constructor the object of the class which implements Runnable interface.
			ex. Thread thread = new Thread(adder);
		- call thread.start()			// to instruct threads to start working by calling the run() method defined when implementing the Runnable interface.
		- call thread.join() 			// the main thread waits for all threads to complete before continuing. 
		
2. ExecutorService (auto manages the the creation of threads, their workloads and termination)
	- Makes use of thread pools - pre-generated threads. ex:- newFixedThreadPool(3) will spawn 3 threads.
		- ex: ExecutorService es = Executors.newFixedThreadPool(3);  // for generation of thread pool.
		
	- in Driver class:-
		- call submit() and pass it the object of the class which implements Runnable interface
			- es.submit(adder);									// calls the run() method defined when impl the Runnable interface.
		- es.shutdown() - 										// finishes work that is already assigned.
		- es.awaitTermination(60, TimeUnit.SECONDS) -   		// wait for 60 seconds for work to finish.
		
For transferring results from thread computations back to driver classes :- 
	- Callable Interface (similar to Runnable interface, but can return results and throw exceptions).
		- only method is the call() method.
			- ex: The class implements Callable<ReturnType> Interface
				- Implements <returnType> call() method - which returns the result of the task performed by the thread.
				
				- using the ExecutorService (es) method defines above create a thread pool
				- call es.submit(class which implements runnable / callable interface and has a run() / call() method).
		
	- Future Interface (represents results from a thread task)
		- returned by ExecutorService.submit()
		- key method is get() - which is blocked till task completes.
		- can return callable interface result & callable interface exception.
			- ex. Declare an array of Future<returnType>[] futures = new Future[3] 	// size is dependent on number of processing tasks which will return values.
				- futures[i] = es.submit(adder). 									// to store the result of the submission of task to thread.
				- once processing is done, loop through futures array and call future.get() to get the result of each individual processing. 	// get blocks until processing is complete.

Synchronising Memory Access
	- using the synchronized keyword
		- used as modifiers for functions
		- implemented internally at the object instance level, thus is one thread is calling into a function with synchronized keyword, no other thread can enter any other function of the class with the synchronized keyword. 
		- constructor can't be marked as synchronized.
		- cons:- has significant overhead 
		
	- Manual Synchronization
		- does not make use of synchronized keyword.
		- makes use of synchronized statement block around the actual core critical section which needs synchronization. 
			- ex: synchronized(object name) { ........ function call ......... }
			